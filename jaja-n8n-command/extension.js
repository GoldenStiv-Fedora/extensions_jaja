// üß† JAJA N8N COMMAND EXTENSION v1.3
// –§–ê–ô–õ: extension.js
// –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï: –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è GNOME Shell –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å n8n
// –û–°–û–ë–ï–ù–ù–û–°–¢–ò:
// - –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ n8n —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫
// - –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –∫–æ–º–∞–Ω–¥
// - –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
// - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥

import St from 'gi://St';
import Gio from 'gi://Gio';
import GLib from 'gi://GLib';
import Clutter from 'gi://Clutter';
import * as Main from 'resource:///org/gnome/shell/ui/main.js';
import * as PanelMenu from 'resource:///org/gnome/shell/ui/panelMenu.js';
import * as PopupMenu from 'resource:///org/gnome/shell/ui/popupMenu.js';

export default class Extension {
    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
     * @param {object} metadata - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
     */
    constructor(metadata) {
        this._meta = metadata;       // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        this._indicator = null;      // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞ –ø–∞–Ω–µ–ª–∏
        this._settings = null;       // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        this._history = [];         // –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ (–º–∞–∫—Å–∏–º—É–º 10)
        this._entry = null;          // –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ GSettings
     * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    _loadSettings() {
        try {
            const schemaDir = Gio.File.new_for_path(`${this._meta.path}/schemas`);
            const schemaSource = Gio.SettingsSchemaSource.new_from_directory(
                schemaDir.get_path(),
                Gio.SettingsSchemaSource.get_default(),
                false
            );
            const schema = schemaSource.lookup('org.gnome.shell.extensions.jaja-n8n-command', true);
            this._settings = new Gio.Settings({ settings_schema: schema });
            return true;
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', e);
            return false;
        }
    }

    /**
     * –í–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
     */
    enable() {
        if (!this._loadSettings()) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ');
            return;
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞ –ø–∞–Ω–µ–ª–∏
        this._indicator = new PanelMenu.Button(0.0, 'n8n Command', false);
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏
        const iconFile = Gio.File.new_for_path(`${this._meta.path}/connect.png`);
        const icon = new St.Icon({
            gicon: new Gio.FileIcon({ file: iconFile }),
            style_class: 'system-status-icon',
            icon_size: 22
        });
        this._indicator.add_child(icon);

        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        const container = new PopupMenu.PopupBaseMenuItem({ reactive: false });
        const box = new St.BoxLayout({ vertical: false, style_class: 'n8n-input-box' });

        // –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã
        this._entry = new St.Entry({
            style_class: 'n8n-command-entry',
            hint_text: '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è n8n',
            can_focus: true,
            x_expand: true
        });

        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        const sendButton = new St.Button({ 
            label: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å', 
            style_class: 'n8n-send-button' 
        });
        this._updateButtonStyle(sendButton);
        this._settings.connect('changed::button-color', () => this._updateButtonStyle(sendButton));

        // –ú–µ–Ω—é –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥
        const historyMenu = new PopupMenu.PopupSubMenuMenuItem('–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥');
        this._updateHistoryMenu(historyMenu);

        // –°–±–æ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        box.add_child(this._entry);
        box.add_child(sendButton);
        container.actor.add_child(box);
        this._indicator.menu.addMenuItem(container);
        this._indicator.menu.addMenuItem(historyMenu);
        Main.panel.addToStatusArea(this._meta.uuid, this._indicator);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        sendButton.connect('clicked', () => this._sendCommand(this._entry));
        this._entry.clutter_text.connect('key-press-event', (_, event) => {
            const key = event.get_key_symbol();
            if ((key === Clutter.KEY_Return || key === Clutter.KEY_KP_Enter) &&
                this._settings.get_boolean('send-on-enter')) {
                this._sendCommand(this._entry);
                return Clutter.EVENT_STOP;
            }
            return Clutter.EVENT_PROPAGATE;
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
     * @param {St.Button} button - –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
     */
    _updateButtonStyle(button) {
        const color = this._settings.get_string('button-color');
        button.style = `
            background-color: ${color};
            color: white;
            border-radius: 5px;
            padding: 6px 12px;
            margin-left: 8px;
        `;
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ –∏—Å—Ç–æ—Ä–∏—é
     * @param {string} cmd - –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
     */
    _addToHistory(cmd) {
        if (this._history.length >= 10) {
            this._history.shift();
        }
        this._history.push(cmd);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥
     * @param {PopupMenu.PopupSubMenuMenuItem} menu - –ú–µ–Ω—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    _updateHistoryMenu(menu) {
        menu.menu.removeAll();
        this._history.slice().reverse().forEach(cmd => {
            const item = new PopupMenu.PopupMenuItem(cmd);
            item.connect('activate', () => {
                this._entry.set_text(cmd);
                this._entry.grab_key_focus();
                this._sendCommand(this._entry);
            });
            menu.menu.addMenuItem(item);
        });
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤ n8n
     * @param {St.Entry} entry - –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã
     */
    async _sendCommand(entry) {
        const text = entry.get_text().trim();
        if (!text) return;

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –æ—Ç–ø—Ä–∞–≤–∫–µ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)
        const showNotify = this._settings.get_boolean('show-send-notify');
        if (showNotify) {
            Main.notify('JAJA n8n', `–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ${text}`);
        }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é
        this._addToHistory(text);
        this._updateHistoryMenu(this._indicator.menu._getMenuItems()[1]);

        // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã curl
        const url = this._settings.get_string('n8n-url');
        const escaped = JSON.stringify(text).slice(1, -1); // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
        const cmd = `curl -s -X POST -H 'Content-Type: application/json' -d '{"cmd":"${escaped}"}' '${url}'`;

        try {
            const [success, output] = await this._executeCommand(cmd);
            if (!success) {
                Main.notifyError('JAJA n8n', output || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã');
            }
            entry.set_text('');
        } catch (e) {
            Main.notifyError('JAJA n8n', e.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ shell-–∫–æ–º–∞–Ω–¥—ã
     * @param {string} command - –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     * @returns {Promise<[boolean, string]>} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è [—É—Å–ø–µ—Ö, –≤—ã–≤–æ–¥]
     */
    _executeCommand(command) {
        return new Promise((resolve) => {
            const proc = Gio.Subprocess.new(
                ['bash', '-c', command],
                Gio.SubprocessFlags.STDOUT_PIPE | Gio.SubprocessFlags.STDERR_PIPE
            );
            proc.wait_async(null, (proc, res) => {
                try {
                    const success = proc.wait_finish(res);
                    const [status, stdout, stderr] = proc.communicate_utf8(null, null);
                    resolve([success, stdout || stderr]);
                } catch (e) {
                    resolve([false, e.message]);
                }
            });
        });
    }

    /**
     * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
     */
    disable() {
        if (this._indicator) {
            this._indicator.destroy();
            this._indicator = null;
        }
        this._settings = null;
        this._history = [];
        this._entry = null;
    }
}
